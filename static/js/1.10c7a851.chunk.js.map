{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Dialogs","Dialog","message","users","DialogItem","props","react_default","a","createElement","className","s","react_router_dom","to","id","name","MessageText","maxLength20","maxLengthCreator","AddMessageReduxForm","reduxForm","form","Fragment","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogs","dialog","map","d","Dialogs_DialogItem_DialogItem","key","user","userMessageData","m","Message","newDialogText","React","createRef","values","addDialogs","newDialog","compose","connect","dispatch","addNewDialogCreate","withAuthRedirect"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,OAAA,wBAAAC,QAAA,yBAAAC,MAAA,yICWHC,EARI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEP,OAClBG,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAM,YAAcP,EAAMQ,IAAKR,EAAMS,KAA9C,OCIWC,EARK,SAACV,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEP,OACfE,EAAMH,0BCCPc,EAAcC,YAAiB,IAc/BC,EAAuBC,YAAU,CAACC,KAAM,wBAAjBD,CAbN,SAACd,GAEtB,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACLf,EAAAC,EAAAC,cAAA,QAAMc,SAAUjB,EAAMkB,cACpBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,UAAYC,IAAWZ,KAAK,YAAYa,YAAY,qBAAqBC,SAAU,CAACC,IAAUb,MAEvGV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAoCOR,EA7BC,SAACK,GAEf,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAUF,EAAMG,OAAOC,IAAK,SAAAC,GAAC,OAAG7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAYtB,KAAOqB,EAAErB,KAAMD,GAAKsB,EAAEtB,GAAIwB,IAAMF,EAAEtB,OAC9EyB,EAAOR,EAAMS,gBAAgBL,IAAK,SAAAM,GAAC,OAAElC,EAAAC,EAAAC,cAACiC,EAAD,CAAavC,QAASsC,EAAEtC,YAC5C4B,EAAMY,cAEJC,IAAMC,YAM7B,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,SAChBM,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,QACf+B,GAEH1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAER,SACfoC,EACDhC,EAAAC,EAAAC,cAACU,EAAD,CAAqBI,SAVT,SAACuB,GACjBxC,EAAMyC,WAAWD,EAAOE,cAUpBzC,EAAAC,EAAAC,cAAA,qCCMOwC,sBACbC,YAboB,SAACnB,GACrB,MAAM,CACJC,YAAYD,EAAMC,cAGG,SAACmB,GACxB,MAAM,CACJJ,WAAW,SAACJ,GACVQ,EAASC,YAAmBT,QAMhCU,IAFaJ,CAGbhD","file":"static/js/1.10c7a851.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__ihULU\",\"Dialog\":\"Dialogs_Dialog__LRgV6\",\"message\":\"Dialogs_message__19rLE\",\"users\":\"Dialogs_users__1OFNk\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) =>{\r\n  return(\r\n    <div className={s.users}>\r\n    <NavLink to=  {'/Dialogs/' + props.id}>{props.name} </NavLink>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst MessageText = (props) =>{\r\n  return (\r\n    <div className={s.users}>\r\n      {props.message}\r\n    </div> \r\n  )\r\n  }\r\n\r\nexport default MessageText;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport MessageText from './Message/Message';\r\nimport {maxLengthCreator, required} from \"../utils/validators/validators\";\r\nimport {Textarea} from \"../common/loader/FormsControls/FormControls\";\r\nconst maxLength20 = maxLengthCreator(20)\r\nconst AddMessageForm = (props)=>{\r\n\r\n  return <>\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={ Textarea } name='newDialog' placeholder='enter your message' validate={[required, maxLength20]}></Field>\r\n      </div>\r\n      <div>\r\n        <button >ADD POST</button>\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\nconst AddMessageReduxForm  = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n  \r\n  let state = props.dialogsPage;\r\n\r\n  let dialogs = state.dialog.map( d=> <DialogItem name= {d.name} id= {d.id} key= {d.id}/> ) ;\r\n  let user = state.userMessageData.map( m=><MessageText message={m.message} /> );\r\n  let  newDialogText = state.newDialogText;\r\n\r\n  let addDialogElement = React.createRef();\r\n\r\n\r\n  let addNewMessage=(values)=> {\r\n    props.addDialogs(values.newDialog)\r\n  }\r\n  return(\r\n    <div className={s.Dialogs}>\r\n      <div className={s.Dialog}>\r\n        {dialogs}\r\n      </div>\r\n      <div className={s.message}>\r\n        {user}\r\n        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs;\r\n","import {addNewDialogCreate} from '../../redux/dialogsPage-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n/*\r\nconst DialogsContainer = (props) => {\r\n  \r\n  \r\n  return  <StoreContext.Consumer>\r\n              {\r\n                (store)=> {\r\n                  \r\n                  //let state = store.getState().dialogsPage;\r\n \r\n \r\n                  let addNewDialog = () => {\r\n                    //let text = addDialogElement.current.value;\r\n                    //props.addDialogs();\r\n                   store.dispatch(addNewDialogCreate());\r\n                   \r\n                  }\r\n                   let NewDialog = (text) => {\r\n                    //let text = addDialogElement.current.value;\r\n                    //props.updateNewDialog(text);\r\n                    //let action = (newDialogCreate(text));\r\n                   store.dispatch(newDialogCreate(text));\r\n                   }\r\n\r\n                  return  <Dialogs updateNewDialog={NewDialog}  addDialogs={addNewDialog} dialogsPage={store.getState().dialogsPage} />\r\n                }\r\n              }\r\n           </StoreContext.Consumer>\r\n    \r\n\r\n}\r\n*/\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return{\r\n    dialogsPage:state.dialogsPage,\r\n  }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    addDialogs:(newDialogText)=>{\r\n      dispatch(addNewDialogCreate(newDialogText));\r\n    },\r\n  }\r\n};\r\nexport default compose(\r\n  connect( mapStateToProps, mapDispatchToProps ) ,\r\n  withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n\r\n"],"sourceRoot":""}